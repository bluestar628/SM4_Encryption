#pragma once
#include <stdio.h>
using namespace std;
typedef unsigned int uint;
typedef unsigned char uchar;
class SM4 {
public:
	//Encrypt key
	uint MK[4] = {
		0x01234567,0x89abcdef,0xfedcba98,0x76543210
	};
	//Encrypt the src
	void enc(uint* src, uint* dst, uint size);
	void dec(uint* src, uint* dst, uint size);
	SM4();
private:
	uchar SBOX[16][16] = //SBox
	{ 0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
		0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
		0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
		0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
		0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
		0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
		0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
		0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
		0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
		0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
		0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
		0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
		0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
		0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
		0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
		0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48 };
	uint CK[32] = //System const value CK
	{ 0x00070e15,0x1c232a31,0x383f464d,0x545b6269,
		0x70777e85,0x8c939aa1,0xa8afb6bd,0xc4cbd2d9,
		0xe0e7eef5,0xfc030a11,0x181f262d,0x343b4249,
		0x50575e65,0x6c737a81,0x888f969d,0xa4abb2b9,
		0xc0c7ced5,0xdce3eaf1,0xf8ff060d,0x141b2229,
		0x30373e45,0x4c535a61,0x686f767d,0x848b9299,
		0xa0a7aeb5,0xbcc3cad1,0xd8dfe6ed,0xf4fb0209,
		0x10171e25,0x2c333a41,0x484f565d,0x646b7279 };
	//System const value
	uint FK[4] = {
		0xA3B1BAC6,0x56AA3350,0x677D9197,0xB27022DC
	};
	//round key from FK and MK
	uint rk[32];

	uint lshift(uint x, uint s);
	uchar Sbox(uchar src);
	uint i(uint a);
	uint L(uint B);
	uint T(uint x);
	uint F(uint x0, uint x1, uint x2, uint x3, uint rk);

	//initialize the round keys
	uint L1(uint B);
	uint T1(uint x);
	void iniRoundKey();

};
const char* hint = "Please input command : \n1 : encrypt the file\n2 : Decrypt the file\n3 : exit\n>";
void warn(const char* s)
{
	system("cls");
	printf("%s\n\n\n%s", s, hint);
}
uint SM4::lshift(uint x, uint s)
{
	if (s == 0) {
		return x;
	}
	return (((x << s) & 0xFFFFFFFF) | ((x >> (32 - s)) & (0x7FFFFFFF >> (31 - s))));
}
uchar SM4::Sbox(uchar src)
{
	return SBOX[uint(src >> 4)][uint(src & uchar(0x0f))];
}
uint SM4::i(uint a)
{
	uint b0 = Sbox(a >> 24) << 24;
	uint b1 = Sbox((a << 8) >> 24) << 16;
	uint b2 = Sbox((a << 16) >> 24) << 8;
	uint b3 = Sbox((a << 24) >> 24);
	return b0 | b1 | b2 | b3;
}

uint  SM4::L(uint B)
{
	return B^lshift(B, 2) ^ lshift(B, 10) ^ lshift(B, 18) ^ lshift(B, 24);
}
uint  SM4::T(uint x)
{
	return L(i(x));
}
uint  SM4::F(uint x0, uint x1, uint x2, uint x3, uint rk)
{
	return x0^T(x1^x2^x3^rk);
}

uint  SM4::L1(uint B)
{
	return B^lshift(B, 13) ^ lshift(B, 23);
}
uint  SM4::T1(uint x)
{
	return L1(i(x));
}
void SM4::iniRoundKey()
{
	uint K[36];
	for (int i = 0; i < 4; i++)
	{
		K[i] = MK[i] ^ FK[i];
	}
	for (int i = 0; i < 32; i++)
	{
		rk[i] = K[i + 4] = K[i] ^ T1(K[i + 1] ^ K[i + 2] ^ K[i + 3] ^ CK[i]);
	}
}


void SM4::enc(uint* src, uint* dst, uint size)
{
	uint up = size / 4;
	uint* a = src;
	uint* b = dst;
	for (int j = 0; j<up; j++) {

		//printf("To Enc: 0x%x 0x%x 0x%x 0x%x\n", a[0], a[1], a[2], a[3]);
		for (int i = 0; i < 32; i++) {
			a[i % 4] = F(a[i % 4], a[(i + 1) % 4], a[(i + 2) % 4], a[(i + 3) % 4], rk[i]);
			//printf("X[%2d]:%8x\n",i, a[i % 4]);
		}
		for (int i = 0; i < 4; i++) {
			b[i] = a[3 - i];
		}
		//printf("After Enc: 0x%x 0x%x 0x%x 0x%x\n", b[0], b[1], b[2], b[3]);
		a += 4;
		b += 4;
	}
}

inline void SM4::dec(uint * src, uint * dst, uint size)
{
	uint up = size / 4;
	uint* a = src;
	uint* b = dst;
	for (int j = 0; j<up; j++) {
		for (int i = 0; i < 32; i++) {
			a[i % 4] = F(a[i % 4], a[(i + 1) % 4], a[(i + 2) % 4], a[(i + 3) % 4], rk[31 - i]);
		}
		for (int i = 0; i < 4; i++) {
			b[i] = a[3 - i];
		}
		a += 4;
		b += 4;
	}

}

SM4::SM4()
{
	printf("Please input the 128 bits key(4 hex formed num)");
	for (int i = 0; i < 4; i++)
	{
		printf("\n>MK[%d]:", i);
		scanf_s("%x", &MK[i]);
	}
	iniRoundKey();
	warn("Ok your key has been accepted!");
}